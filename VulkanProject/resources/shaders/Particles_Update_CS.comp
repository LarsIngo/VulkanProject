#version 450

// Particle.
struct Particle
{
    vec4 position;
    vec4 velocity;
    vec4 color;
    vec4 scale;
};
// Input particles.
layout(binding = 0) buffer CSInput { Particle g_InputParticles[]; };

// Output particles.
layout(binding = 1) buffer CSOutput { Particle g_OutputParticles[]; };

// Meta data.
struct MetaData
{
    float dt;
    uint particleCount;
    float pad[6];
};
// Meta buffer.
layout(binding = 2) buffer CSMetaData { MetaData g_MetaBuffer[]; };

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
    MetaData metaData = g_MetaBuffer[0];
    float dt = metaData.dt;
    uint particleCount = metaData.particleCount;
    uint tID = uint(gl_GlobalInvocationID.x);

    if (tID < particleCount)
    {
        Particle self = g_InputParticles[tID];
        self.position.xyz = self.position.xyz + self.velocity.xyz * dt;
        
        uint intersectCount = 0;
        for (uint pID = 0; pID < particleCount; ++pID)
        {
            if (tID != pID)
            {
                Particle other = g_InputParticles[pID];
                if (length(other.position - self.position) < 1.f)
                {
                    ++intersectCount;
                }                
            }
        }
        self.color = vec4(intersectCount / 10.f, 1.f, 0.f, 0.f);
        
        g_OutputParticles[tID] = self;
    }
}
